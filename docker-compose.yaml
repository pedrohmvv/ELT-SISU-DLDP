version: "3.8"
x-airflow-common: &airflow-common
  image: registry.gitlab.com/lema-ufpb-hub/airflow-image:airflow-2.8.0-python3.11
  env_file:
    - .env
  environment: &airflow-common-env
    SERVER: "docker"
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://postgres:postgres@postgres/airflow
    AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://postgres:postgres@postgres/airflow
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://postgres:postgres@postgres/airflow
    AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: "true"
    AIRFLOW__API__AUTH_BACKENDS: "airflow.api.auth.backend.basic_auth"
    AIRFLOW__CORE__LOAD_EXAMPLES: "false"
    AIRFLOW__CORE__FERNET_KEY: "pMrhjIcqUNHMYRk_ZOBmMptWR6o1DahCXCKn5lEMpzM="
    AIRFLOW__WEBSERVER__SECRET_KEY: "891b3faded3f6bb751a452c8566b2b90becf3d"
    AIRFLOW__WEBSERVER__WORKER_REFRESH_INTERVAL: 60
  volumes:
    - ./src:/opt/airflow/dags
    - ./data:/opt/airflow/data
  user: "${AIRFLOW_UID:-50000}:0"
  depends_on: &airflow-common-depends-on
    redis:
      condition: service_healthy
    postgres:
      condition: service_healthy
services:
  postgres:
    container_name: postgres-container
    hostname: postgres
    image: postgres:14-alpine
    env_file:
      - .env
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: airflow
    volumes:
      - "postgresdb_data:/var/lib/postgresql/data"
    ports:
      - 0.0.0.0:5432:5432
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 5s
      retries: 5
    restart: always
    networks:
      - infra
  pgsetup:
    container_name: postgres-setup
    hostname: postgres
    image: postgres:14-alpine
    depends_on:
      postgres:
        condition: service_healthy
    restart: "no"
    networks:
      - infra
    entrypoint:
      - "bash"
      - "-c"
      - |
        echo "Aguardando"
        psql postgresql://postgres:postgres@postgres:5432 -c 'create database airflow;'
  redis:
    image: redis:7.0.4-alpine
    container_name: redis-container
    hostname: redis
    expose:
      - 6379
    ports:
      - 0.0.0.0:6379:6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 30s
      retries: 50
    restart: always
    networks:
      - infra
  airflow-init:
    <<: *airflow-common
    entrypoint: /bin/bash
    command:
      - -c
      - |
        mkdir -p /sources/logs /sources/dags /sources/plugins
        chown -R "${AIRFLOW_UID}:0" /sources/{logs,dags,plugins}
        exec /entrypoint airflow version
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_UPGRADE: "true"
      _AIRFLOW_WWW_USER_CREATE: "true"
      _AIRFLOW_WWW_USER_USERNAME: "airflow"
      _AIRFLOW_WWW_USER_PASSWORD: "airflow"
    user: "0:0"
    networks:
      - infra
  airflow-webserver:
    <<: *airflow-common
    command: webserver
    container_name: airflow-webserver-container
    ports:
      - 8080:8080
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    networks:
      - infra
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    container_name: airflow-scheduler-container
    healthcheck:
      test:
        [
          "CMD-SHELL",
          'airflow jobs check --job-type SchedulerJob --hostname "$${HOSTNAME}"',
        ]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    networks:
      - infra
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
  airflow-worker:
    <<: *airflow-common
    command: celery worker
    container_name: airflow-worker-container
    healthcheck:
      test:
        - "CMD-SHELL"
        - 'celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
      interval: 10s
      timeout: 10s
      retries: 5
    environment:
      <<: *airflow-common-env
      DUMB_INIT_SETSID: "0"
    restart: always
    networks:
      - infra
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
  mongo:
    container_name: mongo-container
    hostname: mongo
    image: mongo:5.0
    environment:
      MONGO_INITDB_ROOT_USERNAME: mongo
      MONGO_INITDB_ROOT_PASSWORD: mongo
    env_file:
      - .env
    volumes:
      - ${HOME}/mongodb:/data/db
    ports:
      - 0.0.0.0:27017:27017
    restart: always
    networks:
      - infra
  spark-master:
    image: docker.io/bitnami/spark:3.4
    container_name: spark-master
    hostname: spark
    environment:
      - SPARK_MODE=master
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
      - SPARK_USER=spark
      - SPARK_MASTER_WEBUI_PORT=8081
    ports:
      - "0.0.0.0:8081:8081"
    restart: always
    networks:
      - infra
  spark-worker-01:
    container_name: spark-worker-01
    image: docker.io/bitnami/spark:3.4
    volumes:
      - ./data:/opt/airflow/data
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark:7077
      - SPARK_WORKER_MEMORY=2G
      - SPARK_WORKER_CORES=6
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
      - SPARK_USER=spark
    restart: always
    networks:
      - infra
  spark-worker-02:
    container_name: spark-worker-02
    image: docker.io/bitnami/spark:3.4
    volumes:
      - ./data:/opt/airflow/data
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark:7077
      - SPARK_WORKER_MEMORY=2G
      - SPARK_WORKER_CORES=6
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
      - SPARK_USER=spark
    restart: always
    networks:
      - infra
networks:
  infra:
volumes:
  mongodb_data:
  postgresdb_data:
